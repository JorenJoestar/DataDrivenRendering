#pragma once

#include <stdint.h>

/////////////////////////////////////////////////////////////////////////////////
//  
//  Hydra Lib: simple general functions for log, file, process, time.
//
//  Source code     : https://www.github.com/jorenjoestar/Phoenix
//
//  Version         : 0.01
//
/////////////////////////////////////////////////////////////////////////////////

// Different utility functions are defined here.
// Use #define to use the different libraries you need.

#define HY_FILE
#define HY_LOG
//#define HY_PROCESS
#define HY_TIME

#if defined (HY_FILE)

// TODO: add the non-std versions.
#include <string>
#include <vector>
#include <Windows.h>

template <typename T>
using Array = std::vector<T>;

using Buffer = Array<uint8_t>;

using String = std::string;
#endif // HY_FILE

namespace hydra {

    /////////////////////////////////////////////////////////////////////////////////
    // Common
    /////////////////////////////////////////////////////////////////////////////////
    typedef const char* cstring;

    #define ArrayLength(array) ( sizeof(array)/sizeof((array)[0]) )



    /////////////////////////////////////////////////////////////////////////////////
    // Log
    /////////////////////////////////////////////////////////////////////////////////
#if defined(HY_LOG)

    void                    PrintFormat( cstring format, ... );
    void                    PrintFormatConsole( cstring format, ... );
#if defined(_MSC_VER)
    void                    PrintFormatVisualStudio( cstring format, ... );
#endif // _MSC_VER

#endif // HY_LOG
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // File
    /////////////////////////////////////////////////////////////////////////////////
#if defined(HY_FILE)

#if defined(_WIN64)
    using FileTime = FILETIME;
#endif

    using FileHandle = FILE*;

    void                    ReadFileIntoMemory( cstring filename, cstring mode, Buffer& memory );

    void                    OpenFile( cstring filename, cstring mode, FileHandle* file );
    void                    CloseFile( FileHandle file );
    int32_t                 ReadFile( uint8_t* memory, uint32_t elementSize, uint32_t count, FileHandle file );

    void                    FindFilesInPath( cstring pattern, Array<String>& files );
    void                    FindFilesInPath( cstring extension, cstring searchPath, Array<String>& files, Array<String>& directories );

    FileTime                GetLastWriteTime( cstring filename );

    struct ScopedFile {
        ScopedFile( cstring filename, cstring mode );
        ~ScopedFile();

        FileHandle      _file;
    };

#endif // HY_FILE

    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////
    // Process
    /////////////////////////////////////////////////////////////////////////////////
#if defined(HY_PROCESS)

    bool                    ExecuteProcess( cstring working_directory, cstring process_fullpath, cstring arguments );

#endif // HY_PROCESS
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////



    /////////////////////////////////////////////////////////////////////////////////
    // Time
    /////////////////////////////////////////////////////////////////////////////////
#if defined(HY_TIME)

    void                    TimeServiceInit();


#endif // HY_TIME

    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////

} // namespace hydra