shader gpu_text {

	layout {
        
        vertex sprite_instance {
            binding 0 16 instance
            attribute float4 position 0 0 0
        }
    }
	
	render_states {
        state fullscreen {
            Cull None
            ZTest Always
            ZWrite Off
        }

        state sprite {
            Cull None
            ZTest Always
            ZWrite Off
        }
    }

    glsl fullscreen {

        #pragma include "Platform.h"

        #if defined VERTEX

        layout (location = 0) out vec2 vTexCoord;

        void main() {

            vTexCoord.xy = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);
            gl_Position = vec4(vTexCoord.xy * 2.0f - 1.0f, 0.0f, 1.0f);
            // If rendering to a RenderTarget, flip Y
            //gl_Position.y = -gl_Position.y;
        }

        
        #endif // VERTEX


        #if defined FRAGMENT

        layout (location = 0) in vec2 uv;

        layout (location = 0) out vec4 out_color;

        #pragma include "debug_gpu_font.h"

		float text(vec2 uv, vec2 res, inout vec2 print_pos) {
		    float col = 0.0;

		#if defined(FLIP_Y)
		    print_pos = floor(vec2(STRWIDTH(print_pos.x), STRHEIGHT(print_pos.y)));
		#else
		    print_pos = floor(vec2(STRWIDTH(print_pos.x), STRHEIGHT(print_pos.y)));
		#endif // FLIP_Y
		    col += print_char(ch_t, uv, print_pos);
		    col += print_char(ch_e, uv, print_pos);
		    col += print_char(ch_s, uv, print_pos);
		    col += print_char(ch_t, uv, print_pos);
		    col += print_char(ch_spc, uv, print_pos);
		    col += print_char(ch_h, uv, print_pos);
		    col += print_char(ch_g, uv, print_pos);
		    col += print_char(ch_4, uv, print_pos);
		    col += print_char(ch_spc, uv, print_pos);
		    col += print_integer(current_data_index, 3, uv, print_pos);
		    col += print_char(ch_spc, uv, print_pos);
		    col += print_integer(current_entry_index, 3, uv, print_pos);

		    return col;
		}

        void main() {

            vec2 res = vec2(1600, 1000) / DOWN_SCALE;
            vec2 uv = uv.xy / DOWN_SCALE;
            vec2 duv = floor(uv.xy * res / DOWN_SCALE);
            vec2 print_pos = vec2(0);

            print_pos = vec2(5, 4);

            float textPixel = text(duv, res, print_pos);
            
            print_pos = vec2(entries[0].x, entries[0].y);
            uint entry_data_index = entries[0].offset;
            for (uint i = 0; i < entries[0].count; ++i) {
            	textPixel += print_char(data[entry_data_index + i], duv, print_pos);
            }

            if (textPixel < 0.01f)
                discard;
            
            vec3 col = vec3(1);
    		col *= mix(vec3(0.2),vec3(0.5,1,0),textPixel);
            out_color = vec4(col.rgb, 1);
        }

        #endif // FRAGMENT
    }

    glsl calculate_dispatch {

    	#pragma include "debug_gpu_font.h"

    	uint debug_write(uint index, vec4 char) {
    		data[index] = char;
    		++index;
    		return index;
    	}

    	layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
    	void main() {
			ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);

			// Write global label with gpu font system data
			uint entry_index = atomicAdd(current_entry_index, 1);
            uint data_index = atomicAdd(current_data_index, 16);

            data[data_index] = ch_t;
            data[data_index + 1] = ch_e;
            data[data_index + 2] = ch_s;
            data[data_index + 3] = ch_t;
            data[data_index + 4] = ch_spc;
            data[data_index + 5] = ch_h;
            data[data_index + 6] = ch_g;
            data[data_index + 7] = ch_per;
            data[data_index + 8] = ch_4;
            data[data_index + 9] = ch_spc;
            data[data_index + 10] = get_digit(current_data_index, 1);
            data[data_index + 11] = get_digit(current_data_index, 0);
            data[data_index + 12] = ch_spc;
            data[data_index + 13] = get_digit(current_entry_index, 1);
            data[data_index + 14] = get_digit(current_entry_index, 0);

        	vec2 print_pos = floor(vec2(STRWIDTH(5), STRHEIGHT(4)));
            entries[entry_index].x = print_pos.x;
            entries[entry_index].y = print_pos.y;
            entries[entry_index].offset = data_index;
            entries[entry_index].count = 16;

            // Write single character dispatch informations
            uint global_index = 0;
            for (uint e = 0; e < current_entry_index; ++e) {
            	uint entry_data_index = entries[0].offset;
	            for (uint i = 0; i < entries[0].count; ++i) {
	            	dispatches[global_index].x = e;
	            	dispatches[global_index].y = i;

	            	++global_index;
	            }
            }

            // Write indirect draw values
            vertex_count = 6;
        	instance_count = global_index;
        	first_vertex = 0;
        	first_instance = 0;
        	pad00 = 0;
    	}
    }


	glsl main_forward {

		struct LocalConstants {
            mat4                    view_projection_matrix;
            mat4                    projection_matrix_2d;
        };

        layout (std140, binding=0)
        uniform Local{
    		LocalConstants  locals;
    	};


        #define FLIP_Y
        #pragma include "debug_gpu_font.h"

        #if defined VERTEX

        layout (location = 0) out vec2 uv;
        layout (location = 1) flat out uint global_data_index;

        // Per vertex positions and uvs of a quad
        vec3 positions[6]       = vec3[6]( vec3(-0.5,-0.5,0), vec3(0.5,-0.5,0), vec3(0.5, 0.5, 0), vec3(0.5, 0.5, 0), vec3(-0.5,0.5,0), vec3(-0.5,-0.5,0) );
        vec2 uvs[6]             = vec2[6]( vec2(0.0, 1.0),    vec2(1.0, 1.0),   vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 1.0) );

        void main() {

            const uint vertex_index = gl_VertexID % 6;
            // Calculate UVs
            uv.xy = uvs[vertex_index];

            // Sprite size
            const vec2 sprite_size = CHAR_SIZE;
            // Calculate world position
            vec4 world_position = vec4( vec2(positions[ vertex_index ].xy * sprite_size ), 0, 1 );

            uint global_char_index = gl_InstanceIndex;
            uint entry_index = dispatches[global_char_index].x;
            uint entry_char_index = dispatches[global_char_index].y;

            DebugGPUStringEntry entry = entries[entry_index];
            world_position.xy += vec2(entry.x + entry_char_index * sprite_size.x, entry.y);
            // Move position to upper left corner
            world_position.xy += sprite_size * 0.5f;

            global_data_index = entry.offset + entry_char_index;

            gl_Position = locals.projection_matrix_2d * world_position;

        }
        
        #endif // VERTEX


        #if defined FRAGMENT

        layout (location = 0) in vec2 uv;
        layout (location = 1) flat in uint global_data_index;

        layout (location = 0) out vec4 out_color;

		void main() {

			vec4 char_data = data[global_data_index];
			vec2 duv = uv * CHAR_SIZE;
			vec2 print_pos = vec2(0, 10);
            float textPixel = print_char(char_data, duv, print_pos);
            
            if (textPixel < 0.01f)
                discard;
            
            vec3 col = vec3(1);
    		col *= mix(vec3(0.2),vec3(0.5,1,0),textPixel);
            out_color = vec4(col.rgb, 1);
        }

        #endif // FRAGMENT
	}

	glsl through {
		#pragma include "Platform.h"

        #if defined VERTEX

        layout (location = 0) out vec2 vTexCoord;

        void main() {

            vTexCoord.xy = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);
            gl_Position = vec4(vTexCoord.xy * 2.0f - 1.0f, 0.0f, 1.0f);
            // If rendering to a RenderTarget, flip Y
            gl_Position.y = -gl_Position.y;
        }

        #endif // VERTEX

        #if defined FRAGMENT

        layout (location = 0) in vec2 vTexCoord;

        layout (location = 0) out vec4 out_color;

        layout (binding = 1) uniform sampler2D albedo;

		void main() {

            vec4 color = texture( albedo, vTexCoord.xy );
            if (color.a < 0.01)
                discard;

			out_color = vec4(color.rgb, 1);
        }

        #endif // FRAGMENT
	}

    pass fullscreen {
        resources = local
        vertex = fullscreen
        fragment = fullscreen
        render_states = fullscreen
    }

    pass calculate_dispatch {
    	compute = calculate_dispatch
    	dispatch = 1, 1, 1
    }

    pass sprite {
        vertex = main_forward
        fragment = main_forward
        render_states = sprite
    }

    pass through {
		vertex = through
        fragment = through
        render_states = fullscreen
    }
}