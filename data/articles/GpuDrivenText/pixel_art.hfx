shader pixel_art {

	layout {

        list Local {
            cbuffer Local;
            texture2D albedo;
            sbuffer DebugGpuFontBuffer;
            sbuffer DebugGpuFontEntries;
        }

        list sky_list {
            texture2D dither_texture;
        }
        
        vertex sprite_instance {
            binding 0 48 instance
            attribute float4 position 0 0 0
            attribute float4 uv_size_offset 0 1 16
            attribute float2 size 0 2 32
            attribute uint2 flags 0 3 40
        }
    }

    render_states {
        state sprite {
            Cull None
            ZTest LEqual
            ZWrite On
        }

        state fullscreen {
            Cull None
            ZTest Always
            ZWrite Off
        }

        state transparent {
            Cull None
            ZTest Always
            ZWrite Off
            BlendMode Alpha
        }
    }

	glsl main_forward {

		struct LocalConstants {
            mat4                    view_projection_matrix;
            mat4                    projection_matrix_2d;
        };

        layout (std140, set = 0, binding = 0) uniform Local {
    		LocalConstants  locals;
    	};

        #if defined VERTEX
        layout (location = 0) in vec4 position;
        layout (location = 1) in vec4 uv_size_offset;
        layout (location = 2) in vec2 size;
        layout (location = 3) in uvec2 flags; 


        layout (location = 0) out vec4 uv_alpha;
        layout (location = 1) flat out uint out_albedo_id;

        #pragma include "debug_gpu_font.h"

        // Per vertex positions and uvs of a quad
        vec3 positions[6]       = vec3[6]( vec3(-0.5,-0.5,0), vec3(0.5,-0.5,0), vec3(0.5, 0.5, 0), vec3(0.5, 0.5, 0), vec3(-0.5,0.5,0), vec3(-0.5,-0.5,0) );
        vec2 uvs[6]             = vec2[6]( vec2(0.0, 1.0),    vec2(1.0, 1.0),   vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 1.0) );

        void main() {

            const uint vertex_index = gl_VertexID % 6;
            // Calculate UVs
            uv_alpha.xy = uvs[vertex_index];
            uv_alpha.xy = uv_alpha.xy * uv_size_offset.xy + uv_size_offset.zw;
            // Facing could be part of the flags.
            const float facing = position.w;
            // Sprite size
            const vec2 sprite_size = size.xy;
            // Calculate world position
            float screen_space = 0;
            vec4 world_position = vec4( vec2(positions[ vertex_index ].xy * sprite_size * vec2(facing, screen_space > 0 ? -1 : 1)), 0, 1 );
            world_position.xyz += position.xyz;

            uv_alpha.z = 1;

            gl_Position = locals.view_projection_matrix * world_position;

            // Pass through albedo id
            out_albedo_id = flags.y;

            // Depending on the facing, use different vertex.
            const uint leftmost_index = facing == 1 ? 0 : 1;
            if ( vertex_index == leftmost_index ) {
                uint entry_index = atomicAdd(current_entry_index, 1);
                uint data_index = atomicAdd(current_data_index, 16);

                // Output using the actual clipspace position of the vertex.
                entries[entry_index].x = (gl_Position.x * .5 + .5) * 1600;
                entries[entry_index].y = (gl_Position.y * .5 + .5) * 1000 - STRHEIGHT(1);//STRHEIGHT(gl_InstanceIndex) + 100;
                entries[entry_index].offset = data_index;
                entries[entry_index].count = 16;

                float abs_position_x = abs(position.x);
                float abs_position_y = abs(position.y);

                data[data_index] = ch_p;
                data[data_index + 1] = ch_spc;
                data[data_index + 2] = position.x < 0 ? ch_dsh : ch_spc;
                data[data_index + 3] = get_digit(abs_position_x, 2);
                data[data_index + 4] = get_digit(abs_position_x, 1);
                data[data_index + 5] = get_digit(abs_position_x, 0);
                data[data_index + 6] = ch_per;
                data[data_index + 7] = get_digit(abs_position_x, -1);
                data[data_index + 8] = ch_com;
                data[data_index + 9] = position.y < 0 ? ch_dsh : ch_spc;
                data[data_index + 10] = get_digit(abs_position_y, 2);
                data[data_index + 11] = get_digit(abs_position_y, 1);
                data[data_index + 12] = get_digit(abs_position_y, 0);
                data[data_index + 13] = ch_per;
                data[data_index + 14] = get_digit(abs_position_y, -1);
                data[data_index + 15] = ch_spc;
            }
        }
        
        #endif // VERTEX


        #if defined FRAGMENT

        #pragma include "platform.h"

        layout (location = 0) in vec4 uv_alpha;
        layout (location = 1) flat in uint albedo_id;

        layout (location = 0) out vec4 out_color;

        vec2 uv_nearest( vec2 uv, ivec2 texture_size ) {
            vec2 pixel = uv * texture_size;
            pixel = floor(pixel) + .5;

            return pixel / texture_size;
        }

        // From the comments in https://www.shadertoy.com/view/MllBWf
        vec2 uv_iq( vec2 uv, ivec2 texture_size ) {
            vec2 pixel = uv * texture_size;

            const vec2 seam = floor(pixel + 0.5);
            const vec2 dudv = fwidth(pixel);
            pixel = seam + clamp( (pixel - seam) / dudv, -0.5, 0.5);
            
            return pixel / texture_size;
        }

		void main() {

            ivec2 texture_size = textureSize(textures[nonuniformEXT(albedo_id)], 0);
            vec2 final_uv = uv_nearest(uv_alpha.xy, texture_size);

            vec4 color = texture( textures[nonuniformEXT(albedo_id)], final_uv.xy );

            if (color.a < 0.01)
                discard;

			out_color = vec4(color.rgb, 1);
        }

        #endif // FRAGMENT
	}

    glsl fullscreen_triangle {
        #define FULLSCREEN_TRI
        #pragma include "platform.h"
    }

    glsl sky_color {
        #pragma include "platform.h"

        layout (location = 0) in vec2 uv;
        layout (location = 1) flat in uint texture_id;

        layout (location = 0) out vec4 out_color;

        vec2 nearest_filter( vec2 uv, ivec2 texture_size ) {
            vec2 pixel = uv * texture_size;
            pixel = floor(pixel) + .5;

            return pixel / texture_size;
        }

        void main() {

            vec4 bright_color = vec4(32.0/255.0, 63.0/255.0, 62.0/255.0, 1);
            vec4 dark_color = vec4(4.0/255.0, 12.0/255.0, 12.0/255.0, 1);

            uint levels = 6;
            float blend_value = round(uv.y * levels) / levels;

            vec4 color_blend = mix(dark_color, bright_color, blend_value);

            color_blend.a = 1;
            out_color = color_blend;
        }
    }

    pass sprite_forward {
        resources = Local
        vertex = main_forward
        fragment = main_forward
        render_states = sprite
        vertex_layout = sprite_instance
    }

    pass sky_color {
        resource = sky_list
        vertex = fullscreen_triangle
        fragment = sky_color
        render_state = fullscreen
    }
}
