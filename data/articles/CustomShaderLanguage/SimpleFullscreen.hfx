shader SimpleFullscreen {

    // For the artist
    properties {

        // Using Unity ShaderLab syntax:
        // AORemapMin0("AORemapMin0", Range(0.0, 1.0)) = 0.0
        scale("Scale", Float) = 16.0
        albedo("Albedo", 2D) = ""
        modulo("Modulo", Float) = 2.0
    }

    // For the developer
    layout {
        list LocalCompute {
            cbuffer LocalConstants local_constants;
            texture2D albedo_texture;

            texture2Drw rgba8 destination_texture;
        }

        list Local {
            texture2D input_texture;
        }
    }
    
    glsl ComputeTest {

        #pragma include "Platform.h"

        layout(binding=1) uniform sampler2D albedo_texture;

        layout(rgba8, binding=0) writeonly uniform image2D destination_texture;

        layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

        void main() {

            ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

            // Returns a checkerboard pattern:
            vec2 scaled_pos = ceil(gl_GlobalInvocationID.xy / local_constants.scale);
            float color = mod(scaled_pos.x + scaled_pos.y, local_constants.modulo);
            
            imageStore(destination_texture, pos, vec4(color.rrr, 1));
        }
    }

    glsl ToScreen {

        #pragma include "Platform.h"

        #if defined VERTEX
        out vec4 vTexCoord;

        void main() {

            vTexCoord.xy = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);
            vTexCoord.zw = vTexCoord.xy;

            gl_Position = vec4(vTexCoord.xy * 2.0f + -1.0f, 0.0f, 1.0f);
        }
        #endif // VERTEX

        #if defined FRAGMENT

        in vec4 vTexCoord;

        out vec4 outColor;

        layout(binding=0) uniform sampler2D input_texture;

        void main() {
            vec3 color = texture2D(input_texture, vTexCoord.xy).xyz;
            outColor = vec4(1, 1, 0, 1);
            outColor = vec4(color, 1);
        }
        #endif // FRAGMENT
    }

    pipeline = computeTest

    pass FillTexture {
        dispatch = 32, 32, 1
        stage = compute0
        resources = LocalCompute
        compute = ComputeTest
    }

    pass ToScreen {
        stage = final
        resources = Local
        vertex = ToScreen
        fragment = ToScreen
    }
}


















