shader pixel_art {

	layout {
        list Local {
            cbuffer LocalConstants LocalConstants;
            texture2D albedo;
            texture2D normals;
        }

        vertex sprite_instance {
            binding 0 48 instance
            attribute float4 position 0 0 0
            attribute float4 uv_size_offset 0 1 16
            attribute float2 size 0 2 32
        }
    }

    render_states {
        state sprite {
            Cull None
            ZTest LEqual
            ZWrite On
        }

        state sprite_premult {
            Cull None
            ZTest LEqual
            ZWrite On
            BlendMode Premultiplied
        }

        state fullscreen {
            Cull None
            ZTest Always
            ZWrite Off
        }
    }

	glsl main_forward {

		#pragma include "Platform.h"

		struct LocalConstants {
            mat4                    view_projection_matrix;

            float                   time;
            float                   sprite_size;
            float                   alpha_threshold;
            uint                    filter_type;

            vec4                    screen_size;

            float                   filter_width;
            float                   camera_scale;
            float                   texels_per_pixel;
            uint                    premultiplied;
        };

        layout (std140, binding=0)
        uniform Local{
    		LocalConstants  locals;
    	};

        // The default size, in pixels, of the antialiasing filter. The default is 1.0 for a mathematically perfect
        // antialias. But if you want, you can increase this to 1.5, 2.0, 3.0 and such to force a bigger antialias zone
        // than normal, using more screen pixels.
        float SMOOTH_SIZE = locals.filter_width;
        float _HALF_SMOOTH = SMOOTH_SIZE / 2.0;

        #if defined VERTEX
        layout (location = 0) in vec4 position;
        layout (location = 1) in vec4 uv_size_offset;
        layout (location = 2) in vec2 size;

        layout (location = 0) out vec2 uv;

        layout (binding = 1) uniform sampler2D albedo;

        // Per vertex positions and uvs of a quad
        vec3 positions[6]       = vec3[6]( vec3(-0.5,-0.5,0), vec3(0.5,-0.5,0), vec3(0.5, 0.5, 0), vec3(0.5, 0.5, 0), vec3(-0.5,0.5,0), vec3(-0.5,-0.5,0) );
        vec2 uvs[6]             = vec2[6]( vec2(0.0, 1.0),    vec2(1.0, 1.0),   vec2(1.0, 0.0), vec2(1.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 1.0) );

        void main() {

            ivec2 texture_size = textureSize(albedo, 0);

            const uint vertex_index = gl_VertexID % 6;

            uv = uvs[vertex_index] * uv_size_offset.xy + uv_size_offset.zw;

            vec4 world_position = vec4( vec2(positions[ vertex_index ].xy * size * locals.sprite_size), 0, 1 );
            world_position.xyz += vec3(position.xy * locals.sprite_size, position.z);

            gl_Position = locals.view_projection_matrix * world_position;
        }
        #endif // VERTEX


        #if defined FRAGMENT

        layout (location = 0) in vec2 uv;

        layout (location = 0) out vec4 out_color;

        layout (binding = 1) uniform sampler2D albedo;
        layout (binding = 2) uniform sampler2D normals;

        // Nearest filter no matter what sampling you are doing!
        vec2 uv_nearest( vec2 uv, ivec2 texture_size ) {
            vec2 pixel = uv * texture_size;
            pixel = floor(pixel) + .5;

            return pixel / texture_size;
        }

        // https://colececil.io/blog/2017/scaling-pixel-art-without-destroying-it/
        vec2 uv_colececil( vec2 uv, ivec2 texture_size ) {
            vec2 pixel = uv * texture_size;

            vec2 locationWithinTexel = fract(pixel);
            // Calculate the inverse of texels_per_pixel so we multiply here instead of dividing.
            vec2 interpolationAmount = clamp(locationWithinTexel * locals.texels_per_pixel, 0, .5) +
                                       clamp((locationWithinTexel - 1) * locals.texels_per_pixel + .5, 0, .5);

            return (floor(pixel) + interpolationAmount) / texture_size;
        }

        // From the comments in https://www.shadertoy.com/view/MllBWf
        vec2 uv_iq( vec2 uv, ivec2 texture_size ) {
            vec2 pixel = uv * texture_size;

            const vec2 seam = floor(pixel + 0.5);
            const vec2 dudv = fwidth(pixel);
            pixel = seam + clamp( (pixel - seam) / dudv, -0.5, 0.5);
            
            return pixel / texture_size;
        }

        // Implementation https://www.shadertoy.com/view/MllBWf
        vec2 uv_klems( vec2 uv, ivec2 texture_size ) {
            
            vec2 pixels = uv * texture_size + 0.5;
            
            // tweak fractional value of the texture coordinate
            vec2 fl = floor(pixels);
            vec2 fr = fract(pixels);
            vec2 aa = fwidth(pixels) * 0.75;

            fr = smoothstep( vec2(0.5) - aa, vec2(0.5) + aa, fr);
            
            return (fl + fr - 0.5) / texture_size;
        }

        // Fat pixel https://www.shadertoy.com/view/ltBGWc
        vec2 uv_fat_pixel( vec2 uv, ivec2 texture_size ) {
            vec2 pixel = uv * texture_size;

            vec2 fat_pixel = floor(pixel) + 0.5;
            // subpixel aa algorithm (COMMENT OUT TO COMPARE WITH POINT SAMPLING)
            fat_pixel += 1 - clamp((1.0 - fract(pixel)) * locals.texels_per_pixel, 0, 1);
                
            return fat_pixel / texture_size;
        }

        // https://www.shadertoy.com/view/ltfXWS
        // samples from a linearly-interpolated texture to produce an appearance similar to
        // nearest-neighbor interpolation, but with resolution-dependent antialiasing
        // 
        // this function's interface is exactly the same as texture's, aside from the 'res'
        // parameter, which represents the resolution of the texture 'tex'.
        // basically calculates the lengths of (a.x, b.x) and (a.y, b.y) at the same time
        vec2 v2len(in vec2 a, in vec2 b) {
            return sqrt( a * a + b * b );
        }

        vec2 uv_blocky( in vec2 uv, in ivec2 res ) {
            vec2 pixels = uv * res; // enter texel coordinate space.
            
            vec2 seam = floor(pixels + .5); // find the nearest seam between texels.
            
            // here's where the magic happens. scale up the distance to the seam so that all
            // interpolation happens in a one-pixel-wide space.
            pixels = (pixels - seam) / v2len(dFdx(pixels), dFdy(pixels)) + seam;
            
            pixels = clamp(pixels, seam - .5, seam + .5); // clamp to the center of a texel.
            
            return pixels / res;// convert back to 0..1 coordinate space.
        }

        // https://www.shadertoy.com/view/ltBfRD
        vec2 uv_aa_linear( vec2 uv, vec2 res, float width ) {
            vec2 pixels = uv * res;
            
            vec2 pixels_floor = floor(pixels + 0.5);
            vec2 pixels_fract = clamp( (pixels - pixels_floor) / fwidth(pixels) / width, -0.5, 0.5);

            return (pixels_floor + pixels_fract) / res;
        }
        // https://www.shadertoy.com/view/ltBfRD
        vec2 uv_aa_smoothstep( vec2 uv, vec2 res, float width ) {
            vec2 pixels = uv * res;
            
            vec2 pixels_floor = floor(pixels + 0.5);
            vec2 pixels_fract = fract(pixels + 0.5);
            vec2 pixels_aa = fwidth(pixels) * width * 0.5;
            pixels_fract = smoothstep( vec2(0.5) - pixels_aa, vec2(0.5) + pixels_aa, pixels_fract );
            
            return (pixels_floor + pixels_fract - 0.5) / res;
        }

        // https://csantosbh.wordpress.com/2014/02/05/automatically-detecting-the-texture-filter-threshold-for-pixelated-magnifications/
        vec2 uv_cstantos( vec2 uv, vec2 res ) {
            vec2 pixels = uv * res;

            vec2 alpha = 0.7 * fwidth(pixels);
            vec2 pixels_fract = fract(pixels);
            vec2 pixels_diff = clamp( .5 / alpha * pixels_fract, 0, .5 ) +
                               clamp( .5 / alpha * (pixels_fract - 1) + .5, 0, .5 );
            pixels = floor(pixels) + pixels_diff;
            return pixels / res;
        }

        // RNavega method from https://github.com/RNavega/PixelArt-Antialias-Love2D/blob/master/main.lua
        vec2 uv_aa_dist( vec2 uv, vec2 res, out float alpha ) {

            vec2 pixels = uv * res;

            const vec2 nearest_edge = floor( pixels + 0.5 );
            const vec2 edge_distance = (pixels - nearest_edge) * locals.camera_scale;
            const vec2 factor = clamp( edge_distance / vec2(_HALF_SMOOTH), -1.0, 1.0 );

            pixels = (nearest_edge + 0.5 * factor );

            const vec2 center_offset = abs(uv - vec2(0.5));
            vec2 alpha_distance = ((center_offset - 0.5) * res * locals.camera_scale + _HALF_SMOOTH) / SMOOTH_SIZE;
            alpha_distance = clamp( alpha_distance, 0, 1 );
            alpha = 1.0 - max(alpha_distance.x, alpha_distance.y);

            return pixels / res;
        }

        // TODO: https://themaister.net/blog/2018/08/25/pseudo-bandlimited-pixel-art-filtering-in-3d-a-mathematical-derivation/

        // TODO: https://www.shadertoy.com/view/ltcGDX


		void main() {

            float time   = 0;
            ivec2 texture_size = textureSize(albedo, 0);
            
            vec2 pixel = gl_FragCoord.xy;
            vec2 final_uv = uv.xy;

            float alpha_modifier = 1.f;

            switch (locals.filter_type) {
                case 0:
                    final_uv = uv_nearest( uv, texture_size );
                    break;
                case 1:
                    final_uv = uv_fat_pixel( uv, texture_size );
                    break;
                case 2:
                    final_uv = uv_iq( uv, texture_size );
                    break;
                case 3:
                    final_uv = uv_klems( uv, texture_size );
                    break;
                case 4:
                    final_uv = uv_colececil( uv, texture_size );
                    break;
                case 5:
                    final_uv = uv_blocky( uv, texture_size );
                    break;
                case 6:
                    final_uv = uv_aa_linear( uv, texture_size, locals.filter_width );
                    break;
                case 7:
                    final_uv = uv_aa_smoothstep( uv, texture_size, locals.filter_width );
                    break;
                case 8:
                    final_uv = uv_cstantos( uv, texture_size );
                    break;
                case 9:
                    final_uv = uv_aa_dist( uv, texture_size, alpha_modifier );
                    if ( alpha_modifier < locals.alpha_threshold )
                        discard;
                    break;

            }
            vec4 color = texture( albedo, final_uv.xy );

            float alpha_discard = locals.premultiplied == 0 ? locals.alpha_threshold : 0.1;

            if ( color.a < alpha_discard )
                discard;

            if (locals.premultiplied == 1)
                color.rgb *= color.a;

			out_color = vec4(color.rgb, color.a * alpha_modifier);
        }

        #endif // FRAGMENT
	}

    pass sprite {
        resources = Local
        vertex = main_forward
        fragment = main_forward
        render_states = sprite
        vertex_layout = sprite_instance
    }

    pass sprite_premult {
        resources = Local
        vertex = main_forward
        fragment = main_forward
        render_states = sprite_premult
        vertex_layout = sprite_instance
    }
}
