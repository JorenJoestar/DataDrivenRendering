shader ImGui {

    // For the artist
    properties {

    }

    // For the developer
    layout {
        
        list Local {
            cbuffer LocalConstants;
            texture2D Texture;
        }

        vertex main {
            binding 0 20 vertex
            attribute float2 Position 0 0 0 
            attribute float2 UV 0 1 8
            attribute ubyte4n Color 0 2 16
        }

    }

    render_states {
        state alpha_no_z {
            Cull None
            ZWrite Off
            BlendMode Alpha
        }
    }
    
    glsl ToScreen {
        
        #pragma include "Platform.h"

        #if defined VERTEX

        layout (location = 0) in vec2 Position;
        layout (location = 1) in vec2 UV;
        layout (location = 2) in vec4 Color;

        layout (std140, binding=0) uniform LocalConstants { mat4 ProjMtx; };

        layout (location = 0) out vec2 Frag_UV;
        layout (location = 1) out vec4 Frag_Color;

        void main()
        {
            Frag_UV = UV;
            Frag_Color = Color;
            gl_Position = ProjMtx * vec4(Position.xy,0,1);
        }

        #endif // VERTEX

        #if defined FRAGMENT
        layout (location = 0) in vec2 Frag_UV;
        layout (location = 1) in vec4 Frag_Color;
        
        layout (binding = 1) uniform sampler2D Texture;
        
        layout (location = 0) out vec4 Out_Color;
        
        void main()
        {
            Out_Color = Frag_Color * texture(Texture, Frag_UV.st);
        }
        #endif // FRAGMENT
    }

    pass ToScreen {
        // stage = fullscreen
        render_states = alpha_no_z
        vertex_layout = main
        resources = Local
        vertex = ToScreen
        fragment = ToScreen
    }
}